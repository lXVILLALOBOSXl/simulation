// file: SupplyChainOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package supply.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: SupplyChainOntology.java
 * @author ontology bean generator
 * @version 2017/11/28, 20:55:55
 */
public class SupplyChainOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "SupplyChain";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new SupplyChainOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String CUSTOMERORDERREQUEST_FORCUSTOMER="forCustomer";
    public static final String CUSTOMERORDERREQUEST="CustomerOrderRequest";
    public static final String MANUFACTURERINFORMATIONREQUEST_FORMANUFACTURER="forManufacturer";
    public static final String MANUFACTURERINFORMATIONREQUEST="ManufacturerInformationRequest";
    public static final String MANUFACTURERORDERREQUEST_FORMANUFACTURER="forManufacturer";
    public static final String MANUFACTURERORDERREQUEST="ManufacturerOrderRequest";
    public static final String IMD_CPU="IMD_CPU";
    public static final String IMD_MOTHERBOARD="IMD_Motherboard";
    public static final String HDD_2TB="HDD_2TB";
    public static final String MINTEL_CPU="Mintel_CPU";
    public static final String MANUFACTURERORDERRESPONSE_MANUFACTURERORDERLINE="manufacturerOrderLine";
    public static final String MANUFACTURERORDERRESPONSE="ManufacturerOrderResponse";
    public static final String COMPONENTORDERPART_QUANTITY="quantity";
    public static final String COMPONENTORDERPART_COMPONENT="component";
    public static final String COMPONENTORDERPART="ComponentOrderPart";
    public static final String CUSTOMERORDERRESPONSE_CUSTOMERORDERLINE="customerOrderLine";
    public static final String CUSTOMERORDERRESPONSE="CustomerOrderResponse";
    public static final String STOCKAVAILABILITY_COST="cost";
    public static final String STOCKAVAILABILITY_QUANTITY="quantity";
    public static final String STOCKAVAILABILITY_COMPONENT="component";
    public static final String STOCKAVAILABILITY="StockAvailability";
    public static final String RAM_4GB="RAM_4GB";
    public static final String COMPONENT="Component";
    public static final String MANUFACTURERINFORMATIONRESPONSE_FORMANUFACTURER="forManufacturer";
    public static final String MANUFACTURERINFORMATIONRESPONSE_COMPONENTAVAILABILITY="componentAvailability";
    public static final String MANUFACTURERINFORMATIONRESPONSE="ManufacturerInformationResponse";
    public static final String HDD_1TB="HDD_1TB";
    public static final String MINTEL_MOTHERBOARD="Mintel_Motherboard";
    public static final String RAM_16GB="RAM_16GB";

  /**
   * Constructor
  */
  private SupplyChainOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema raM_16gbSchema = new ConceptSchema(RAM_16GB);
    add(raM_16gbSchema, supply.ontology.RAM_16GB.class);
    ConceptSchema mintel_MotherboardSchema = new ConceptSchema(MINTEL_MOTHERBOARD);
    add(mintel_MotherboardSchema, supply.ontology.Mintel_Motherboard.class);
    ConceptSchema hdD_1tbSchema = new ConceptSchema(HDD_1TB);
    add(hdD_1tbSchema, supply.ontology.HDD_1TB.class);
    ConceptSchema manufacturerInformationResponseSchema = new ConceptSchema(MANUFACTURERINFORMATIONRESPONSE);
    add(manufacturerInformationResponseSchema, supply.ontology.ManufacturerInformationResponse.class);
    ConceptSchema componentSchema = new ConceptSchema(COMPONENT);
    add(componentSchema, supply.ontology.Component.class);
    ConceptSchema raM_4gbSchema = new ConceptSchema(RAM_4GB);
    add(raM_4gbSchema, supply.ontology.RAM_4GB.class);
    ConceptSchema stockAvailabilitySchema = new ConceptSchema(STOCKAVAILABILITY);
    add(stockAvailabilitySchema, supply.ontology.StockAvailability.class);
    ConceptSchema customerOrderResponseSchema = new ConceptSchema(CUSTOMERORDERRESPONSE);
    add(customerOrderResponseSchema, supply.ontology.CustomerOrderResponse.class);
    ConceptSchema componentOrderPartSchema = new ConceptSchema(COMPONENTORDERPART);
    add(componentOrderPartSchema, supply.ontology.ComponentOrderPart.class);
    ConceptSchema manufacturerOrderResponseSchema = new ConceptSchema(MANUFACTURERORDERRESPONSE);
    add(manufacturerOrderResponseSchema, supply.ontology.ManufacturerOrderResponse.class);
    ConceptSchema mintel_CPUSchema = new ConceptSchema(MINTEL_CPU);
    add(mintel_CPUSchema, supply.ontology.Mintel_CPU.class);
    ConceptSchema hdD_2tbSchema = new ConceptSchema(HDD_2TB);
    add(hdD_2tbSchema, supply.ontology.HDD_2TB.class);
    ConceptSchema imD_MotherboardSchema = new ConceptSchema(IMD_MOTHERBOARD);
    add(imD_MotherboardSchema, supply.ontology.IMD_Motherboard.class);
    ConceptSchema imD_cpuSchema = new ConceptSchema(IMD_CPU);
    add(imD_cpuSchema, supply.ontology.IMD_CPU.class);

    // adding AgentAction(s)
    AgentActionSchema manufacturerOrderRequestSchema = new AgentActionSchema(MANUFACTURERORDERREQUEST);
    add(manufacturerOrderRequestSchema, supply.ontology.ManufacturerOrderRequest.class);
    AgentActionSchema manufacturerInformationRequestSchema = new AgentActionSchema(MANUFACTURERINFORMATIONREQUEST);
    add(manufacturerInformationRequestSchema, supply.ontology.ManufacturerInformationRequest.class);
    AgentActionSchema customerOrderRequestSchema = new AgentActionSchema(CUSTOMERORDERREQUEST);
    add(customerOrderRequestSchema, supply.ontology.CustomerOrderRequest.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    manufacturerInformationResponseSchema.add(MANUFACTURERINFORMATIONRESPONSE_COMPONENTAVAILABILITY, stockAvailabilitySchema, 0, ObjectSchema.UNLIMITED);
    manufacturerInformationResponseSchema.add(MANUFACTURERINFORMATIONRESPONSE_FORMANUFACTURER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    stockAvailabilitySchema.add(STOCKAVAILABILITY_COMPONENT, componentSchema, ObjectSchema.OPTIONAL);
    stockAvailabilitySchema.add(STOCKAVAILABILITY_QUANTITY, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    stockAvailabilitySchema.add(STOCKAVAILABILITY_COST, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    customerOrderResponseSchema.add(CUSTOMERORDERRESPONSE_CUSTOMERORDERLINE, componentOrderPartSchema, 0, ObjectSchema.UNLIMITED);
    componentOrderPartSchema.add(COMPONENTORDERPART_COMPONENT, componentSchema, ObjectSchema.OPTIONAL);
    componentOrderPartSchema.add(COMPONENTORDERPART_QUANTITY, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    manufacturerOrderResponseSchema.add(MANUFACTURERORDERRESPONSE_MANUFACTURERORDERLINE, componentOrderPartSchema, 0, ObjectSchema.UNLIMITED);
    manufacturerOrderRequestSchema.add(MANUFACTURERORDERREQUEST_FORMANUFACTURER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    manufacturerInformationRequestSchema.add(MANUFACTURERINFORMATIONREQUEST_FORMANUFACTURER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    customerOrderRequestSchema.add(CUSTOMERORDERREQUEST_FORCUSTOMER, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    raM_16gbSchema.addSuperSchema(componentSchema);
    mintel_MotherboardSchema.addSuperSchema(componentSchema);
    hdD_1tbSchema.addSuperSchema(componentSchema);
    raM_4gbSchema.addSuperSchema(componentSchema);
    mintel_CPUSchema.addSuperSchema(componentSchema);
    hdD_2tbSchema.addSuperSchema(componentSchema);
    imD_MotherboardSchema.addSuperSchema(componentSchema);
    imD_cpuSchema.addSuperSchema(componentSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
